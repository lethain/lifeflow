"""
DATE: 2008/1/11
AUTHOR: Will R. Larson

This module integrates Jared Kuolt's *Static File Generator for Django* with the LifeFlow blogging solution.

The Static File Generator allows pages to be rendered to static files, instead of being dynamically generated by Django (or hitting the Django caching mechanism).

### Pros and Cons of this module

There are some advantages to this approach:

1. Serving static files puts a very minimal load on the server.
2. Even if your server is going to hell in a handbasket (aka shared hosting), its going to be able to serve static files even if it can't spare the memory for FastCGI or WSGI to render the page anew.

and some disadvantages:

1. The page will only be re-rendered when you explicitly ask for it to be, and thus it will lose parts of its dynacism (for example the random links to other blog entries will only be randomly chosen each time you re-render the page).


### Who should use this module?

Those with the most to gain from this module are those running on a resource restricted system. Thus those running on small VPS or on shared servers can use this to reduce their dependence on unreliable resources at their disposal.

Sometimes even if you are running on a system with more resources you may still benefit from this module as it will allow you to weather traffic peaks (nginx can serve thousands of static files per second on your 256 MBs of RAM VPS, but mod_python will be serving a whole lot less.

### What is cached?

Not everything is cached using this solution. A comprehensive list of everything that will be cached is:

1. The main page.
2. The page for each blog entry
3. The tag cloud page.
4. The series page.
5. The projects page
6. The page for each project.

And a comprehensive list of the events that will save their static page cache to be updated:

1. When an entry is saved, the main page, the tag cloud, the series page, the previous entry (if one exists), the next entry (if one exists), and the page for that specific entry are all refreshed.
2. When a comment is saved, the main page and the specific entry's page are refreshed.
3. When a project is saved, the projects page and the project's page are rerendered.


### Usage

To use this module you must:

1. And the variable "WEB_ROOT" to your settings.py file for the project.
2. Add "static_files" to the "LIFEFLOW_MODS" list.
3. Configure your server to look for the static files being created in "WEB_ROOT" before it attempts to query Apache.


The details of configuring this for your server will vary depending on your specific setup, and what server you are using. Try [looking here](http://www.lethain.com/projects/lifeflow/) for resources on doing so.

"""
from generator import quick_publish
from lifeflow.models import Comment, Entry, Project
from django.dispatch import dispatcher
from django.db.models import signals


def render_for_entry(sender, instance, signal, *args, **kwargs):
    # note: not yet re-rendering previous and next entries
    quick_publish((instance, '/', '/articles/', '/tags/'))
    
def render_for_comment(sender, instance, signal, *args, **kwargs):
    quick_publish((instance.entry, '/'))

def render_for_project(sender, instance, signal, *args, **kwargs):
    quick_publish((instance, '/projects'))


dispatcher.connect(render_for_entry, signal=signals.post_save, sender=Entry)
dispatcher.connect(render_for_comment, signal=signals.post_save, sender=Comment)
dispatcher.connect(render_for_project, signal=signals.post_save, sender=Project)
